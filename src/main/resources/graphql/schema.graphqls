type Query {
    codespaces: [String]
    operators: [Operator]

    vehicles(
        lat: Float!
        lon: Float!
        range: Int!
        count: Int
        codespaces: [String]
        systems: [String]
        operators: [String]
        formFactors: [FormFactor]
        propulsionTypes: [PropulsionType]
        includeReserved: Boolean = false
        includeDisabled: Boolean = false
    ): [Vehicle]

    stations(
        lat: Float!
        lon: Float!
        range: Int!
        count: Int
        codespaces: [String]
        systems: [String]
        operators: [String]
    ): [Station]

    stationsById(ids: [String]!): [Station]

    geofencingZones(systemIds: [ID]): [GeofencingZones]
}

type Vehicle {
    id: ID!
    lat: Float!
    lon: Float!
    isReserved: Boolean!
    isDisabled: Boolean!
    currentRangeMeters: Float!
    vehicleType: VehicleType!
    pricingPlan: PricingPlan!
    rentalUris: RentalUris
    system: System!
}

type VehicleType {
    id: ID!
    formFactor: FormFactor!
    propulsionType: PropulsionType!
    maxRangeMeters: Float
    name: TranslatedString
}

enum FormFactor {
    BICYCLE
    CAR
    MOPED
    SCOOTER
    OTHER
}

enum PropulsionType {
    HUMAN
    ELECTRIC_ASSIST
    ELECTRIC
    COMBUSTION
}

type PricingPlan {
    id: ID!
    url: String
    name: TranslatedString!
    currency: String!
    price: Float!
    isTaxable: Boolean!
    description: TranslatedString!
    perKmPricing: [PricingSegment]
    perMinPricing: [PricingSegment]
    surgePricing: Boolean
}

type PricingSegment {
    start: Int!
    rate: Float!
    interval: Int!
    end: Int
}

type RentalUris {
    android: String
    ios: String
    web: String
}

type Station {
    id: ID!
    name: TranslatedString!
    shortName: TranslatedString
    lat: Float!
    lon: Float!
    address: String
    crossStreet: String
    region: Region
    postCode: String
    rentalMethods: [RentalMethod]
    isVirtualStation: Boolean
    stationArea: MultiPolygon
    capacity: Int
    vehicleCapacity: [VehicleTypeCapacity]
    vehicleTypeCapacity: [VehicleTypeCapacity]
    isValetStation: Boolean
    rentalUris: RentalUris
    numBikesAvailable: Int!
    vehicleTypesAvailable: [VehicleTypeAvailability]
    numBikesDisabled: Int
    numDocksAvailable: Int
    vehicleDocksAvailable: [VehicleDocksAvailability]
    numDocksDisabled: Int
    isInstalled: Boolean!
    isRenting: Boolean!
    isReturning: Boolean!
    lastReported: Int!
    system: System!
    pricingPlans: [PricingPlan]!
}

type System {
    id: ID!
    language: String!
    name: TranslatedString!
    shortName: TranslatedString
    operator: Operator!
    url: String
    purchaseUrl: String
    startDate: String
    phoneNumber: String
    email: String
    feedContactEmail: String
    timezone: String!
    licenseUrl: String
    rentalApps: RentalApps
}

type RentalApps {
    ios: RentalApp
    android: RentalApp
}

type RentalApp {
    storeUri: String
    discoveryUri: String
}

enum RentalMethod {
    KEY
    CREDITCARD
    PAYPASS
    APPLEPLAY
    ANDROIDPAY
    TRANSITCARD
    ACCOUNTNUMBER
    PHONE
}

type Translation {
    language: String!
    value: String!
}

type TranslatedString {
    translation: [Translation]!
}

type Operator {
    id: ID!
    name: TranslatedString!
}

type VehicleTypeCapacity {
    vehicleType: VehicleType!
    count: Int!
}

type VehicleTypeAvailability {
    vehicleType: VehicleType!
    count: Int!
}

type VehicleDocksAvailability {
    vehicleTypes: [VehicleType]!
    count: Int!
}

type GeofencingZones {
    systemId: ID
    geojson: FeatureCollection
}

type FeatureCollection {
    type: String
    features: [Feature]
}

type Feature {
    type: String
    geometry: MultiPolygon
    properties: GeofencingZoneProperties
}

type MultiPolygon {
    type: String
    coordinates: [[[[Float]]]]
}

type GeofencingZoneProperties {
    name: String
    start: Int
    end: Int
    rules: [GeofencingZoneRule]
}

type GeofencingZoneRule {
    vehicleTypeIds: [String]
    rideAllowed: Boolean!
    rideThroughAllowed: Boolean!
    maximumSpeedKph: Int
}

type Region {
    id: ID!
    name: String!
}