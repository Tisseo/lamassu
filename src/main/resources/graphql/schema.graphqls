type Query {
    codespaces: [String]

    vehicles(
        lat: Float!
        lon: Float!
        range: Int!
        count: Int
        codespaces: [String]
        formFactors: [FormFactor]
        propulsionTypes: [PropulsionType]
        includeReserved: Boolean = false
        includeDisabled: Boolean = false
    ): [Vehicle]

    stations(
        lat: Float!
        lon: Float!
        range: Int
        count: Int
        codespaces: [String]
    ): [Station]

    stationsById(ids: [String]!): [Station]
}

type Vehicle {
    id: ID!
    lat: Float!
    lon: Float!
    isReserved: Boolean!
    isDisabled: Boolean!
    currentRangeMeters: Float!
    vehicleType: VehicleType!
    pricingPlan: PricingPlan!
    rentalUris: RentalUris
    system: System!
}

type VehicleType {
    id: ID!
    formFactor: FormFactor!
    propulsionType: PropulsionType!
    maxRangeMeters: Float
    name: TranslatedString
}

enum FormFactor {
    BICYCLE
    CAR
    MOPED
    SCOOTER
    OTHER
}

enum PropulsionType {
    HUMAN
    ELECTRIC_ASSIST
    ELECTRIC
    COMBUSTION
}

type PricingPlan {
    id: ID!
    url: String
    name: TranslatedString!
    currency: String!
    price: Float!
    isTaxable: Boolean!
    description: TranslatedString!
    perKmPricing: [PricingSegment]
    perMinPricing: [PricingSegment]
    surgePricing: Boolean
}

type PricingSegment {
    start: Int!
    rate: Float!
    interval: Int!
    end: Int
}

type RentalUris {
    android: String
    ios: String
    web: String
}

type Station {
    id: ID!
    name: TranslatedString!
    lat: Float!
    lon: Float!
    address: String
    capacity: Int
    numBikesAvailable: Int!
    numDocksAvailable: Int
    isInstalled: Boolean!
    isRenting: Boolean!
    isReturning: Boolean!
    lastReported: Int!
    system: System!
    pricingPlans: [PricingPlan]!
}

type System {
    id: ID!
    language: String!
    name: TranslatedString!
    shortName: TranslatedString
    operator: Operator!
    url: String
    purchaseUrl: String
    startDate: String
    phoneNumber: String
    email: String
    feedContactEmail: String
    timezone: String!
    licenseUrl: String
    rentalApps: RentalApps
}

type RentalApps {
    ios: RentalApp
    android: RentalApp
}

type RentalApp {
    storeUri: String
    discoveryUri: String
}

type Translation {
    language: String!
    value: String!
}

type TranslatedString {
    translation: [Translation]!
}

type Operator {
    id: ID!
    name: TranslatedString!
}